{"version":3,"sources":["component/Modals/AddTag.js"],"names":["useStyles","makeStyles","theme","contentFix","padding","wrapper","margin","spacing","position","buttonProgress","color","palette","secondary","light","top","left","marginTop","marginLeft","content","display","textField","scroll","overflowX","dialogContent","pathSelect","icons","Circle","CircleOutline","Heart","HeartOutline","Hexagon","HexagonOutline","Hexagram","HexagramOutline","Rhombus","RhombusOutline","Square","SquareOutline","Triangle","AddTag","props","useTheme","React","useState","value","setValue","loading","setLoading","alignment","setAlignment","text","setColor","filename","tagName","path","input","setInput","pathSelectDialog","setPathSelectDialog","selectedPath","setSelectedPath","setSelectedPathName","handleInputChange","name","event","target","dispatch","useDispatch","ToggleSnackbar","useCallback","vertical","horizontal","msg","toggleSnackbar","submitNewLink","API","post","then","response","onClose","onSuccess","type","expression","icon","id","data","catch","error","message","submitNewTag","classes","open","aria-labelledby","fullWidth","presentPath","selected","onSelect","folder","onClick","disabled","onChange","newValue","variant","aria-label","label","className","rows","multiline","size","exclusive","newAlignment","Object","keys","map","key","index","style","alignSelf"],"mappings":"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","file":"static/js/7.8ca46d41.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    CircularProgress\n} from \"@material-ui/core\";\nimport {\n    toggleSnackbar,\n} from \"../../actions/index\";\nimport PathSelector from \"../FileManager/PathSelector\";\nimport { useDispatch } from \"react-redux\";\nimport API from \"../../middleware/Api\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport {\n    Circle,\n    CircleOutline,\n    Heart,\n    HeartOutline,\n    Hexagon,\n    HexagonOutline,\n    Hexagram,\n    HexagramOutline,\n    Rhombus,\n    RhombusOutline,\n    Square,\n    SquareOutline,\n    Triangle,\n} from \"mdi-material-ui\";\n\nconst useStyles = makeStyles(theme => ({\n    contentFix: {\n        padding: \"10px 24px 0px 24px\"\n    },\n    wrapper: {\n        margin: theme.spacing(1),\n        position: \"relative\"\n    },\n    buttonProgress: {\n        color: theme.palette.secondary.light,\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        marginTop: -12,\n        marginLeft: -12\n    },\n    content: {\n        padding: 0,\n        marginTop: 0\n    },\n    marginTop: {\n        marginTop: theme.spacing(2),\n        display: \"block\"\n    },\n    textField: {\n        marginTop: theme.spacing(1)\n    },\n    scroll: {\n        overflowX: \"auto\"\n    },\n    dialogContent: {\n        marginTop: theme.spacing(2)\n    },\n    pathSelect: {\n        marginTop: theme.spacing(2),\n        display: \"flex\"\n    }\n}));\n\nconst icons = {\n    Circle: <Circle />,\n    CircleOutline: <CircleOutline />,\n    Heart: <Heart />,\n    HeartOutline: <HeartOutline />,\n    Hexagon: <Hexagon />,\n    HexagonOutline: <HexagonOutline />,\n    Hexagram: <Hexagram />,\n    HexagramOutline: <HexagramOutline />,\n    Rhombus: <Rhombus />,\n    RhombusOutline: <RhombusOutline />,\n    Square: <Square />,\n    SquareOutline: <SquareOutline />,\n    Triangle: <Triangle />\n};\n\nexport default function AddTag(props) {\n    const theme = useTheme();\n\n    const [value, setValue] = React.useState(0);\n    const [loading, setLoading] = React.useState(false);\n    const [alignment, setAlignment] = React.useState(\"Circle\");\n    const [color, setColor] = React.useState(theme.palette.text.secondary);\n    const [input, setInput] = React.useState({\n        filename: \"\",\n        tagName: \"\",\n        path: \"/\"\n    });\n    const [pathSelectDialog, setPathSelectDialog] = React.useState(false);\n    const [selectedPath, setSelectedPath] = useState(\"\");\n    // eslint-disable-next-line\n    const [selectedPathName, setSelectedPathName] = useState(\"\");\n    const setMoveTarget = folder => {\n        let path =\n            folder.path === \"/\"\n                ? folder.path + folder.name\n                : folder.path + \"/\" + folder.name;\n        setSelectedPath(path);\n        setSelectedPathName(folder.name);\n    };\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleIconChange = (event, newAlignment) => {\n        if (newAlignment) {\n            setAlignment(newAlignment);\n        }\n    };\n\n    const handleColorChange = (event, newAlignment) => {\n        if (newAlignment) {\n            setColor(newAlignment);\n        }\n    };\n\n    const handleInputChange = name => event => {\n        setInput({\n            ...input,\n            [name]: event.target.value\n        });\n    };\n\n    const dispatch = useDispatch();\n    const ToggleSnackbar = useCallback(\n        (vertical, horizontal, msg, color) =>\n            dispatch(toggleSnackbar(vertical, horizontal, msg, color)),\n        [dispatch]\n    );\n\n    const submit = () => {\n        if (value === 0) {\n            submitNewTag();\n        }else{\n            submitNewLink();\n        }\n    };\n\n    const submitNewLink = ()=>{\n        setLoading(true);\n\n        API.post(\"/tag/link\", {\n            path: input.path,\n            name:input.tagName\n        })\n            .then(response => {\n                setLoading(false);\n                props.onClose();\n                props.onSuccess({\n                    type: 1,\n                    name: input.tagName,\n                    expression:input.path,\n                    color: theme.palette.text.secondary,\n                    icon: \"FolderHeartOutline\",\n                    id: response.data\n                });\n            })\n            .catch(error => {\n                ToggleSnackbar(\"top\", \"right\", error.message, \"error\");\n            })\n            .then(() => {\n                setLoading(false);\n            });\n    }\n\n    const submitNewTag = () => {\n        setLoading(true);\n\n        API.post(\"/tag/filter\", {\n            expression: input.filename,\n            name: input.tagName,\n            color: color,\n            icon: alignment\n        })\n            .then(response => {\n                setLoading(false);\n                props.onClose();\n                props.onSuccess({\n                    type: 0,\n                    name: input.tagName,\n                    color: color,\n                    icon: alignment,\n                    id: response.data\n                });\n            })\n            .catch(error => {\n                ToggleSnackbar(\"top\", \"right\", error.message, \"error\");\n            })\n            .then(() => {\n                setLoading(false);\n            });\n    };\n\n    const selectPath = ()=>{\n        setInput({\n            ...input,\n            path: selectedPath === \"//\" ? \"/\" : selectedPath\n        });\n        setPathSelectDialog(false);\n    }\n\n    const classes = useStyles();\n\n    return (\n        <Dialog\n            open={props.open}\n            onClose={props.onClose}\n            aria-labelledby=\"form-dialog-title\"\n            fullWidth\n        >\n            <Dialog\n                open={pathSelectDialog}\n                onClose={() => setPathSelectDialog(false)}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">选择目录</DialogTitle>\n                <PathSelector presentPath=\"/\" selected={[]} onSelect={setMoveTarget} />\n\n                <DialogActions>\n                    <Button onClick={() => setPathSelectDialog(false)}>\n                        取消\n                    </Button>\n                    <Button onClick={selectPath} color=\"primary\" disabled={selectedPath === \"\"}>\n                        确定\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <AppBar position=\"static\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    variant=\"fullWidth\"\n                    aria-label=\"full width tabs example\"\n                >\n                    <Tab label=\"文件分类\" />\n                    <Tab label=\"目录快捷方式\" />\n                </Tabs>\n            </AppBar>\n            {value === 0 && (\n                <DialogContent className={classes.dialogContent}>\n                    <TextField\n                        label=\"标签名\"\n                        id=\"filled-name\"\n                        value={input[\"tagName\"]}\n                        onChange={handleInputChange(\"tagName\")}\n                        fullWidth\n                        className={classes.textField}\n                    />\n                    <TextField\n                        id=\"filled-name\"\n                        label=\"文件名匹配规则\"\n                        value={input[\"filename\"]}\n                        onChange={handleInputChange(\"filename\")}\n                        fullWidth\n                        rows=\"4\"\n                        multiline\n                        variant=\"filled\"\n                        className={classes.textField}\n                    />\n                    <Typography variant=\"caption\" color={\"textSecondary\"}>\n                        你可以使用<code>*</code>作为通配符。比如\n                        <code>*.png</code>\n                        表示匹配png格式图像。多行规则间会以“或”的关系进行运算。\n                    </Typography>\n                    <FormLabel className={classes.marginTop}>图标：</FormLabel>\n                    <div className={classes.scroll}>\n                        <ToggleButtonGroup\n                            size=\"small\"\n                            value={alignment}\n                            exclusive\n                            onChange={handleIconChange}\n                            className={classes.textField}\n                        >\n                            {Object.keys(icons).map((key, index) => (\n                                <ToggleButton key={index} value={key}>\n                                    {icons[key]}\n                                </ToggleButton>\n                            ))}\n                        </ToggleButtonGroup>\n                    </div>\n                    <FormLabel className={classes.marginTop}>颜色：</FormLabel>\n                    <div className={classes.scroll}>\n                        <ToggleButtonGroup\n                            size=\"small\"\n                            value={color}\n                            exclusive\n                            onChange={handleColorChange}\n                            className={classes.textField}\n                        >\n                            {[\n                                theme.palette.text.secondary,\n                                \"#f44336\",\n                                \"#e91e63\",\n                                \"#9c27b0\",\n                                \"#673ab7\",\n                                \"#3f51b5\",\n                                \"#2196f3\",\n                                \"#03a9f4\",\n                                \"#00bcd4\",\n                                \"#009688\",\n                                \"#4caf50\",\n                                \"#cddc39\",\n                                \"#ffeb3b\",\n                                \"#ffc107\",\n                                \"#ff9800\",\n                                \"#ff5722\",\n                                \"#795548\",\n                                \"#9e9e9e\",\n                                \"#607d8b\"\n                            ].map((key, index) => (\n                                <ToggleButton key={index} value={key}>\n                                    <Circle style={{ color: key }} />\n                                </ToggleButton>\n                            ))}\n                        </ToggleButtonGroup>\n                    </div>\n                </DialogContent>\n            )}\n            {value === 1 && (\n                <DialogContent className={classes.dialogContent}>\n                    <TextField\n                        label=\"标签名\"\n                        id=\"filled-name\"\n                        value={input[\"tagName\"]}\n                        onChange={handleInputChange(\"tagName\")}\n                        fullWidth\n                        className={classes.textField}\n                    />\n                    <div className={classes.pathSelect}>\n                        <TextField\n                            label=\"目录路径\"\n                            id=\"filled-name\"\n                            value={input[\"path\"]}\n                            onChange={handleInputChange(\"path\")}\n                            fullWidth\n                            className={classes.textField}\n                        />\n                        <Button\n                            onClick={()=>setPathSelectDialog(true)}\n                            style={{\n                                marginLeft: theme.spacing(1),\n                                alignSelf: \"flex-end\"\n                            }}\n                            color=\"primary\"\n                            variant=\"outlined\"\n                        >\n                            选择\n                        </Button>\n                    </div>\n                </DialogContent>\n            )}\n            <DialogActions>\n                <Button onClick={props.onClose}>取消</Button>\n                <div className={classes.wrapper}>\n                    <Button\n                        onClick={submit}\n                        color=\"primary\"\n                        disabled={\n                            loading ||\n                            (value === 0 &&\n                                (input.filename === \"\" ||\n                                    input.tagName === \"\")) ||\n                            (value === 1 && (input.tagName === \"\" ||\n                                input.path === \"\"))\n                        }\n                    >\n                        确定\n                        {loading && (\n                            <CircularProgress\n                                size={24}\n                                className={classes.buttonProgress}\n                            />\n                        )}\n                    </Button>\n                </div>\n            </DialogActions>\n        </Dialog>\n    );\n}\n"],"sourceRoot":""}